const { StatusCodes } = require("http-status-codes");
const BadRequestError = require("../error/error.classes/BadRequestError");
const NotFoundError = require("../error/error.classes/NotFoundError");
const authService = require("./auth.service");
const authUtil = require("./auth.util");
const bcrypt = require("bcryptjs");
const UnauthorizedError = require("../error/error.classes/UnauthorizedError");
const jwt = require("jsonwebtoken");
const commonConfig = require("../common/common.config");
const InternalServerError = require("../error/error.classes/InternalServerError");

const login = async (req, res) => {
    const { email, password } = req.body;

    // validations
    if (!password) throw new BadRequestError("Password is required!");

    const dbAuth = await authService.findById(email);
    if (!dbAuth) throw new NotFoundError("User not found!");

    //compare the passwords
    const passwordCompare = await bcrypt.compare(password, String(dbAuth.password));
    if (!passwordCompare) throw new UnauthorizedError("Bad Credentials!");

    // populate user
    const dbPopulatedAuth = await dbAuth.populate("user");

    // issue tokens
    const tokens = authUtil.issueTokens(dbPopulatedAuth.user);
    dbAuth.accessToken = tokens.accessToken;
    dbAuth.refreshToken = tokens.refreshToken;
    authService.save(dbAuth);

    return res
        .status(StatusCodes.OK)
        .json({ message: "Login successfull!", user: dbPopulatedAuth.user, tokens });
};

const loginWithGoogle = async (req, res) => {
    const { idToken } = req.body;

    if (!idToken)
        // validate id token
        throw new BadRequestError(
            handleLanguageTranslation(authTranslations.GOOGLE_ID_TOKEN_REQUIRED, lang)
        );

    const client = commonConfig.OAuth2Client;
    const ticket = await client.verifyIdToken({
        idToken: idToken,
        audience: process.env.GOOGLE_OAUTH_CLIENT_ID,
    });
    const payload = ticket.getPayload();

    const email = payload?.email;
    if (!email)
        throw new InternalServerError(
            "Something went wrong with verifing your identity!"
        );

    const dbAuth = await authService.findById(email);
    if (!dbAuth) throw new NotFoundError("User not found!");

    // populate user
    const dbPopulatedAuth = await dbAuth.populate("user");

    // issue tokens
    const tokens = authUtil.issueTokens(dbPopulatedAuth.user);
    dbAuth.accessToken = tokens.accessToken;
    dbAuth.refreshToken = tokens.refreshToken;
    authService.save(dbAuth);

    return res
        .status(StatusCodes.OK)
        .json({ message: "Login successfull!", user: dbPopulatedAuth.user, tokens });
};

const rotateTokens = async (req, res) => {
    const { refreshToken } = req.body;

    if (!refreshToken) throw new BadRequestError("Refresh token is required!");

    let payload = null;
    // vertify token
    try {
        payload = jwt.verify(refreshToken, process.env.JWT_SECRET);
    } catch (err) {
        if (err.name === "TokenExpiredError")
            throw new UnauthorizedError("Your session is expired!");
        throw new UnauthorizedError(`You're unauthorized to access this resource!`);
    }

    const dbAuth = await authService.findByUserId(payload._id);
    if (!dbAuth) throw new NotFoundError("User not found!");

    if (dbAuth.refreshToken !== refreshToken) throw new UnauthorizedError("Invalid refresh token!");

    // populate user
    const dbPopulatedAuth = await dbAuth.populate("user");

    // issue tokens
    const tokens = authUtil.issueTokens(dbPopulatedAuth.user);
    dbAuth.accessToken = tokens.accessToken;
    dbAuth.refreshToken = tokens.refreshToken;
    authService.save(dbAuth);

    return res.status(StatusCodes.OK).json({ message: "Login successfull!", tokens });
};

module.exports = { login, loginWithGoogle, rotateTokens };
