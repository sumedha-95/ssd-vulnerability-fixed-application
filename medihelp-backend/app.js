const express = require("express");
const cors = require("cors");
const commonConfig = require("./modules/common/common.config");
const constants = require("./constants");
require("dotenv").config();
require("express-async-errors");
const errorHandlerMiddleware = require("./modules/error/error.middleware");
const NotFoundError = require("./modules/error/error.classes/NotFoundError");
const rateLimit = require('express-rate-limit');

// import routes
const userRoutes = require("./modules/user/user.route");
const authRoutes = require("./modules/auth/auth.route");
const pharamacyRoutes = require("./modules/pharmacy/pharmacy.route");
const orderRoutes = require("./modules/order/order.route");
const globalMedicineRoutes = require("./modules/globalMedicine/globalMedicine.route");
const medicineRoutes = require("./modules/medicine/medicine.route");
const paymentRoutes = require("./modules/payment/payment.route");

const app = express();

// Create a rate limiter for prevent ddos attack
const limiter = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 10, // Limit each IP to 10 requests per windowMs
  message: 'Too many requests from this IP address, please try again later!',
});
// Apply the rate limiter to routes
app.use(limiter);

const whitelist = ["http://localhost:3000", "http://localhost:3001"];
const corsOptionsDelegate = function (req, callback) {
    var corsOptions;
    if (whitelist.indexOf(req.header("Origin")) !== -1) {
        corsOptions = { origin: true }; // reflect (enable) the requested origin in the CORS response
    } else {
        corsOptions = { origin: false }; // disable CORS for this request
    }
    callback(null, corsOptions); // callback expects two parameters: error and options
};
app.use(cors(corsOptionsDelegate));

// Use parsers only for non-webhook routes
app.use((req, res, next) => {
    if (req.originalUrl === constants.API.PREFIX.concat("/payments/stripe-webhook")) {
        next();
    } else {
        express.json()(req, res, next);
        app.use(express.urlencoded({ extended: true }));
    }
});

// define routes
app.use(constants.API.PREFIX.concat("/users"), userRoutes);
app.use(constants.API.PREFIX.concat("/auth"), authRoutes);
app.use(constants.API.PREFIX.concat("/pharmacies"), pharamacyRoutes);
app.use(constants.API.PREFIX.concat("/orders"), orderRoutes);
app.use(constants.API.PREFIX.concat("/global-medicines"), globalMedicineRoutes);
app.use(constants.API.PREFIX.concat("/medicines"), medicineRoutes);
app.use(constants.API.PREFIX.concat("/payments"), paymentRoutes);

// not found route
app.use((req, res, next) => {
    throw new NotFoundError("API endpoint not found!");
});

// error handler middleware
app.use(errorHandlerMiddleware);

const start = async () => {
    const port = process.env.PORT || 5001;
    try {
        await commonConfig.connectDB();
        app.listen(port, () => {
            console.log(`SERVER IS LISTENING ON PORT ${port}...`);
        });
    } catch (err) {
        console.error(err);
    }
};

start();
