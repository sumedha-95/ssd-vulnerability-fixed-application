import axios from "axios";
import constants from "../constants";
import store from "../store";
import { authActions } from "../store/authSlice";
import { popAlert } from "./alerts";

let isRefreshing = false;
let refreshTokenQueue = [];

const refreshToken = async () => {
    const newState = store.getState();
    const refreshToken = newState ? newState.auth?.refreshToken : null;
    try {
        const response = await axios.post(`${constants.API_BASE_URL}/auth/token-rotation`, {
            refreshToken,
        });
        const tokens = response.data.tokens;
        store.dispatch(authActions.refreshTokens(tokens));
        return tokens;
    } catch (error) {
        await popAlert(
            "Error!",
            "Your session is invalid. Please login again!",
            "error",
            "Go to Login"
        ).then((res) => {
            if (res.isConfirmed) {
                window.location.replace("/auth/sign-in");
                return;
            }
        });
    }
};

const createAxiosInstance = (headers) => {
    const api = axios.create({
        baseURL: constants.API_BASE_URL,
        headers,
    });

    api.interceptors.response.use(
        (response) => response,
        async (error) => {
            const originalRequest = error.config;

            if (error.response.status === 401 && !originalRequest._retry) {
                if (isRefreshing) {
                    try {
                        const token = await new Promise((resolve) => {
                            refreshTokenQueue.push(resolve);
                        });
                        originalRequest.headers["Authorization"] = `Bearer ${token}`;
                        return axios(originalRequest);
                    } catch (error) {
                        return Promise.reject(error);
                    }
                }

                isRefreshing = true;
                originalRequest._retry = true;

                let tokens = {};
                try {
                    tokens = await refreshToken();
                    originalRequest.headers["Authorization"] = `Bearer ${tokens?.accessToken}`;
                    return axios(originalRequest);
                } catch (error) {
                    return Promise.reject(error);
                } finally {
                    isRefreshing = false;
                    refreshTokenQueue.forEach((resolve) => resolve(tokens?.accessToken));
                    refreshTokenQueue = [];
                }
            }

            return Promise.reject(error);
        }
    );

    return api;
};

export const getApi = () => {
    const newState = store.getState();
    const token = newState ? newState.auth?.accessToken : null;

    const headers = {
        Authorization: token ? `Bearer ${token}` : null,
        "Content-type": "application/json",
    };

    return createAxiosInstance(headers);
};

export const getApiForFormData = () => {
    const newState = store.getState();
    const token = newState ? newState.auth?.accessToken : null;

    const headers = {
        Authorization: token ? "Bearer " + token : null,
        "Content-type": "multipart/form-data",
    };

    return createAxiosInstance(headers);
};
